def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 29

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "app.cheon.app"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            // Prevents x86 binaries from being included in the app as it won't
            // contain x86 Flutter binaries until Flutter provides x86 support
            // so the app crashes 
            abiFilters 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile file(keystoreProperties['storeFile'])
           storePassword keystoreProperties['storePassword']
       }
   }

   buildTypes {
       release {
           /*  if (BuildConfig.FLAVOR.equals("prod")) {
                signingConfig signingConfigs.release
                println "Signing with release config"
            } else {
                signingConfig signingConfigs.debug
                println "Signing with debug config"
            } */
            signingConfig signingConfigs.release

            minifyEnabled true


            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true
            
            // Proguard rules are still obeyed with the R8 code shrinker
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
       }
   }

    flavorDimensions "flavor-dim"
    
    // App variants that can coexist on a single device
    productFlavors {
        
        // Production
        prod {
            dimension "flavor-dim"
        }

        // Development
        dev {
            dimension "flavor-dim"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        // Performance profiling, [profile] clashes with a build gradle name
        performance {
            dimension "flavor-dim"
            applicationIdSuffix ".performance"
            versionNameSuffix "-performance"
        }
        
        // Some automated tests e.g. Driver tests or Repeato tests
        devTesting {
            dimension "flavor-dim"
            applicationIdSuffix ".dev_testing"
            versionNameSuffix "-testing"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}


apply plugin: 'com.google.gms.google-services'  // Google Services plugin