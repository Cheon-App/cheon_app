def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "app.cheon.app"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile file(keystoreProperties['storeFile'])
           storePassword keystoreProperties['storePassword']
       }
   }

   buildTypes {
       release {
            signingConfig signingConfigs.release

            minifyEnabled true


            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true
            
            // Proguard rules are still obeyed with the R8 code shrinker
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
       }
   }

    flavorDimensions "flavor-dim"
    
    // App variants that can coexist on a single device
    productFlavors {
        
        prod {
            dimension "flavor-dim"
        }

        staging {
            dimension "flavor-dim"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
        
        dev {
            dimension "flavor-dim"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
        
        dev2 {
            dimension "flavor-dim"
            applicationIdSuffix ".dev2"
            versionNameSuffix "-dev2"
        }
        
        dev3 {
            dimension "flavor-dim"
            applicationIdSuffix ".dev3"
            versionNameSuffix "-dev3"
        }

        devTesting {
            dimension "flavor-dim"
            applicationIdSuffix ".dev_testing"
            versionNameSuffix "-testing"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}


apply plugin: 'com.google.gms.google-services'  // Google Services plugin
apply plugin: 'io.fabric' // Fabric plugin